---
title: Home
---


.row
  .content-wrap
    .home-taster
      p.home-taster__intro Check out the examples below to get a taste for how our libraries work
      .home-taster__code
        .taster#eg-dry-validation
          .taster__header
            h3
              a href="/gems/dry-validation" dry-validation
            a.taster__link href="/gems/dry-validation" View docs
          .taster__content
            .taster__summary
              markdown:
                Offers powerful data validation based on predicate logic. Unlike other, well known, validation solutions in Ruby, dry-validation takes a different approach and focuses a lot on explicitness, clarity and precision of validation logic.
            .taster__example
              markdown:
                ```ruby
                Dry::Validation.Schema do
                  required(:age) { int? & gt?(18) }
                end
                ```
              p.code-caption This is a caption
              markdown:
                ```ruby
                Dry::Validation.Schema do
                  required(:age) { int? & gt?(18) }
                end
                ```
        .taster#eg-dry-validation
          .taster__header
            h3
              a href="/gems/dry-validation" dry-validation
            a.taster__link href="/gems/dry-validation" View docs
          .taster__content
            .taster__summary
              markdown:
                Offers powerful data validation based on predicate logic. Unlike other, well known, validation solutions in Ruby, dry-validation takes a different approach and focuses a lot on explicitness, clarity and precision of validation logic.
            .taster__example
              markdown:
                ```ruby
                Dry::Validation.Schema do
                  required(:age) { int? & gt?(18) }
                end
                ```
              p.code-caption This is a caption
              markdown:
                With normal text around.

                ```ruby
                module Types
                  include Dry::Types.module

                  Email = String.constrained(format: /\A[\w+\-.]+@[a-z\d\-]+(\.[a-z]+)*\.[a-z]+\z/i)
                  Age = Int.constrained(gt: 18)
                end

                class User < Dry::Struct
                  attribute :name, Types::String
                  attribute :email, Types::Email
                  attribute :age, Types::Age
                end
                ```
